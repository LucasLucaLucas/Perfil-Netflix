* {
    margin: 0px;
    padding: 0px;
  
}

 body {
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #141414;
    flex-direction: column;
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
}

.container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap:20px
    
}

.titulo {
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 25px;
    font-size: 25px;
   
  
}

.titulo > h1 {
    font-weight: 100
}


.perfil{
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;

}

.perfil > img {
   height: 150px;
   border-radius: 3px;
  

}

.perfil > img:hover {
    border: 3px solid white;
}

.perfil > p {
    color: #585858;
    margin-top: 8px;
    font-size: 18px;
}



.botao {
    margin-top: 85px;
    height: 50px;

}

button {
    font-size: 18px;
    width: 265px;
    height: 45px;
    background-color: transparent;
    color: #808080;
    border: none;
    border: 3px solid #808080;

}

/* Adiciona a mudan√ßa de cor do texto ao passar o mouse no container da imagem */
.perfil:hover > p {
    color: #F4F4F4;
}

button:hover {
    color:#F4F4F4;
    border: 3px solid #F4F4F4;
    cursor: pointer;
}




/* Explica√ß√£o do flex direction collum no body


Vamos pensar no layout como se fosse um brinquedo de montar, onde cada pe√ßa tem um lugar especial e a gente precisa organizar essas pe√ßas de uma forma espec√≠fica. üòä

Imagine o **body** (a parte maior onde tudo vai dentro) como uma prateleira onde voc√™ quer colocar duas coisas:

1. **Um t√≠tulo** ("Quem est√° assistindo?") no topo.
2. **Uma prateleira menor** que cont√©m as fotos e o bot√£o. Essa prateleira menor √© o `.container`.

Para fazer isso, precisamos que o **body** organize essas coisas de cima para baixo, uma embaixo da outra, como uma coluna. √â por isso que usamos `flex-direction: column` no **body**. Isso ajuda a colocar o **t√≠tulo** primeiro, depois a **prateleira com as fotos** e, logo abaixo dessa prateleira, o **bot√£o**.

Agora, dentro da **prateleira de fotos** (`.container`), queremos que as imagens fiquem lado a lado, como uma fileira. Ent√£o, colocamos `display: flex` no `.container`, mas **sem `flex-direction: column`** ali. Quando n√£o colocamos `flex-direction`, o padr√£o √© organizar em **linha** (ou seja, as fotos ficam uma do lado da outra).

Por √∫ltimo, colocamos o bot√£o **fora da prateleira de fotos**, logo abaixo. Como o **body** est√° em "modo coluna", ele coloca o bot√£o logo embaixo da prateleira de fotos automaticamente, porque √© o pr√≥ximo "brinquedo" a ser colocado na prateleira.

Ent√£o, em resumo:

- O `flex-direction: column` no **body** organiza os itens principais (t√≠tulo, prateleira de fotos, e bot√£o) **em coluna** (de cima para baixo).
- Dentro da **prateleira de fotos** (`.container`), as fotos ficam em linha porque `flex-direction` n√£o foi alterado ali.

√â como se a prateleira maior (o **body**) tivesse v√°rias prateleiras menores dentro, cada uma organizada do jeito que a gente quer. üòä */